#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        L_Lshift {
            bindings = <&kp LSHFT>;
            key-positions = <17 16>;
        };

        L_LCtrl {
            bindings = <&kp LCTRL>;
            key-positions = <16 15>;
        };

        L_LAlt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <14 15>;
        };

        L_LGui {
            bindings = <&kp LGUI>;
            key-positions = <18 17>;
        };

        R_Shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <23 24>;
        };

        R_LCrl {
            bindings = <&kp LCTRL>;
            key-positions = <24 25>;
        };

        R_LAlt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <26 25>;
        };

        R_Gui {
            bindings = <&kp LEFT_GUI>;
            key-positions = <22 23>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&mt LC(A) LC(Z)  &kp SLASH  &kp W  &kp E       &kp R        &kp T                                  &kp UP                &kp Y        &kp U            &kp I      &kp O      &kp SEMICOLON  &trans
&mt LC(C) LC(X)  &kp A      &kp S  &kp D       &kp F        &kp G                        &kp LEFT  &kp ENTER  &kp RIGHT  &kp H        &kp J            &kp K      &kp L      &kp P          &trans
&kp LC(V)        &kp Z      &kp X  &kp C       &kp V        &kp Q           &kp SPACE              &kp DOWN              &kp N        &kp M            &kp B      &kp COMMA  &kp PERIOD     &trans
                                   &lt 10 ESC  &lt 8 SPACE  &lt 9 CAPSLOCK                                               &lt 6 ENTER  &lt 5 BACKSPACE  &lt 7 DEL
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            display-name = "NUMBER";
            bindings = <
&trans  &kp N1           &kp N2          &kp N3        &kp N4        &kp N5                                         &mmv MOVE_UP                     &kp N6           &kp N7           &kp N8           &kp N9           &kp N0    &kp BSPC
&trans  &bt BT_CLR_ALL   &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3                   &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT        &kp HOME  &kp PG_UP
&trans  &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &trans        &trans        &rgb_ug RGB_EFF  &kp C_MUTE                    &mmv MOVE_DOWN                   &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp END   &kp PG_DN
                                         &trans        &trans        &trans                                                                          &kp INS          &kp DEL          &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            display-name = "SYMBOL";
            bindings = <
&trans  &kp EXCL      &kp AT        &kp HASH   &kp DLLR   &kp PRCNT                            &mmv MOVE_UP                     &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&trans  &bt BT_CLR    &mkp LCLK     &mkp MCLK  &mkp RCLK  &mkp MB4             &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&trans  &out OUT_USB  &out OUT_BLE  &none      &none      &mkp MB5   &trans                    &mmv MOVE_DOWN                   &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                    &trans     &trans     &kp SPACE                                                             &kp RET    &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            display-name = "Fn";
            bindings = <
&studio_unlock  &kp F1      &kp F2     &kp F3       &kp F4     &kp F5                                  &mmv MOVE_UP                     &kp F6       &kp F7     &kp F8       &kp F9      &kp F10          &kp F11
&trans          &trans      &mkp LCLK  &mkp MCLK    &mkp RCLK  &mkp MB4                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &bootloader  &mkp LCLK  &mkp MCLK    &mkp RCLK   &kp PRINTSCREEN  &kp F12
&trans          &sys_reset  &trans     &bootloader  &trans     &mkp MB5  &kp C_MUTE                    &mmv MOVE_DOWN                   &trans       &trans     &bootloader  &sys_reset  &kp SCROLLLOCK   &kp PAUSE_BREAK
                                       &trans       &trans     &trans                                                                   &trans       &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;
        };

        Num {
            bindings = <
&trans  &kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT                     &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp APOS   &kp N4  &kp N5   &kp N6  &kp EQUAL            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp GRAVE  &kp N1  &kp N2   &kp N3  &kp BSLH   &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                           &kp DOT  &kp N0  &trans                                       &trans  &trans  &trans
            >;
        };

        Sym {
            bindings = <
&trans  &kp LEFT_BRACE     &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp DOUBLE_QUOTES  &kp DOLLAR       &kp PERCENT   &kp LCTRL              &kp PLUS                   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp TILDE          &kp EXCLAMATION  &kp AT_SIGN   &kp HASH               &kp PIPE         &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                            &trans        &kp RIGHT_PARENTHESIS  &kp MINUS                                          &trans  &trans  &trans
            >;
        };

        Fun {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8      &kp F9     &kp PRINTSCREEN                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F11  &kp F4  &kp F5      &kp F6     &kp SCROLLLOCK             &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F10  &kp F1  &kp F2      &kp F3     &kp C_PAUSE      &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                         &kp C_MENU  &kp SPACE  &kp TAB                                            &trans  &trans  &trans
            >;
        };

        Nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &kp LC(C)   &kp LC(V)    &kp UP         &kp LC(X)  &kp LC(Z)  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &kp TAB     &kp LEFT     &kp DOWN       &kp RIGHT  &kp HOME   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &kp INSERT  &kp PAGE_UP  &kp PAGE_DOWN  &kp END    &kp RALT   &trans
                        &trans  &trans  &trans                                    &trans      &trans       &trans
            >;
        };

        Mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &kp LC(C)         &kp LC(V)       &mmv MOVE_UP    &kp LC(X)        &kp LC(Z)        &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &kp C_AC_BACK     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans           &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &kp C_AC_FORWARD  &msc SCRL_UP    &msc SCRL_DOWN  &msc SCRL_LEFT   &msc SCRL_RIGHT  &trans
                        &trans  &trans  &trans                                    &mkp RCLK         &mkp LCLK       &mkp MCLK
            >;
        };

        Media {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &out OUT_USB  &out OUT_BLE  &out OUT_TOG     &bt BT_CLR    &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans        &kp C_VOL_DN  &kp C_VOLUME_UP  &kp C_MUTE    &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3  &trans
                        &trans  &trans  &trans                                    &trans  &trans        &trans
            >;
        };
    };
};
